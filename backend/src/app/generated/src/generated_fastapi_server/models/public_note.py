# coding: utf-8

"""
    Simple Note Application API

    Public-first API for browsing latest public notes and managing a personal notebook of plain text notes (for anonymous and regular users). Authentication is via Firebase ID tokens passed as `Authorization: Bearer <token>`.  ## Real-time Features This API includes WebSocket integration for real-time comment notifications. When comments are posted, they are automatically broadcasted to all connected WebSocket clients for live updates. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from generated_fastapi_server.models.author import Author
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PublicNote(BaseModel):
    """
    Public note entity (includes full content for detail view)
    """ # noqa: E501
    id: StrictStr
    title: Annotated[str, Field(strict=True, max_length=120)]
    content: StrictStr = Field(description="Plain text content")
    author: Author
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    published_at: datetime = Field(alias="publishedAt")
    __properties: ClassVar[List[str]] = ["id", "title", "content", "author", "createdAt", "updatedAt", "publishedAt"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PublicNote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PublicNote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "content": obj.get("content"),
            "author": Author.from_dict(obj.get("author")) if obj.get("author") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "publishedAt": obj.get("publishedAt")
        })
        return _obj


